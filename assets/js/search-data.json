{
  
    
        "post0": {
            "title": "Scrum Roles",
            "content": "Scrum Roles . Our group decided on the following roles: . Shaurya Goel: Scrum Master Evan Apari: DevOps Alex Lu: Backend Haseeb Beg and Tirth Thakar: Frontend . As scrum master, I will make sure my team is always on task and that we have our review tickets ready on time.Also I will talk on the behalf of my team to Mr. Mortensen so that all questions are answered and that the content is understood. . Alex will be the backend programmer in our group as he is very advanced in object oriented programming. I will also be able to help Alex Lu out as I have understanding in python and other OOP languages. . Tirth and Haseeb will collaborate together as frontend programmers. They have already started collaborating and using frontened tools on our final project and I can see this working out in the near future. . Evan will be our DevOps manager, he did well with the AWS deployment and I can see him being productive in the future. . Agile Methodology Picture . img class=”card-img-top” src=”” alt=”Python Development” height=”600”&gt; .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%205/2022/09/29/scrum.html",
            "relUrl": "/week%205/2022/09/29/scrum.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "AP Prep Multiple Choice",
            "content": "All College Board MCQs (100%) . . Problems while doing the College Board MCQs . Documentation for procedure with complicated algorithms/loops/lists | . .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%206/2022/09/27/mcq.html",
            "relUrl": "/week%206/2022/09/27/mcq.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Using HTML fragments and JavaScript data to build a table",
            "content": "Defining a dictionary with data . var dict = { ScrumLeader: &quot;Shaurya Goel&quot;, BackendDeveloper: &quot;Alex Lu&quot;, FrontendDeveloper: &quot;Haseeb Beg&quot;, FrontendDeveloper2: &quot;Tirth Thakar&quot;, DevOps: &quot;Evan Apari&quot;, }; . Pritning out Data in an HTML Table . function createTable(data){ var table = &quot;&lt;table&gt;&lt;tr&gt;&lt;th&gt;Role&lt;/th&gt;&lt;th&gt;Member&lt;/th&gt;&lt;/tr&gt;&quot; var keys = Object.keys(data); for(var index in keys){ const key = keys[index]; const value = dict[key]; table += &quot;&lt;tr&gt;&lt;td&gt;&quot;+key+&quot;&lt;/td&gt;&lt;td&gt;&quot;+value+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;; } table += &quot;&lt;/table&gt;&quot;; return table; } $$.html(createTable(dict)); . RoleMember . ScrumLeader | Shaurya Goel | . BackendDeveloper | Alex Lu | . FrontendDeveloper | Haseeb Beg | . FrontendDeveloper2 | Tirth Thakar | . DevOps | Evan Apari | .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%205/2022/09/26/JSJN2.html",
            "relUrl": "/week%205/2022/09/26/JSJN2.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Usage of Jupyter JavaScript kernel",
            "content": "Usage of Jupyter JavaScript Kernel . Printing &quot;Hello World&quot; . console.log(&quot;Hello World&quot;) . Hello World . Printing &quot;Hello World&quot; with Encapsulation . msg = &quot;Hello World&quot; console.log(msg) . Hello World . Function that multiplies two numbers . function myFunction(a, b) { return a * b; } myFunction(659,8999956) . 5930971004 . Function that checks if a number is even or odd . function NumType(x){ if (x % 2 == 0) { console.log(x + &quot; is an even number&quot;); } else { console.log(x + &quot; is an odd number&quot;); } } NumType(35) . 35 is an odd number . JavaScript Data that will be used for the HTML Post . var dict = { ScrumLeader: &quot;Shaurya Goel&quot;, BackendDeveloper: &quot;Alex Lu&quot;, FrontendDeveloper: &quot;Haseeb Beg&quot;, FrontendDeveloper2: &quot;Tirth Thakar&quot;, DevOps: &quot;Evan Apari&quot;, }; console.log(dict) . { ScrumLeader: &#39;Shaurya Goel&#39;, BackendDeveloper: &#39;Alex Lu&#39;, FrontendDeveloper: &#39;Haseeb Beg&#39;, FrontendDeveloper2: &#39;Tirth Thakar&#39;, DevOps: &#39;Evan Apari&#39; } .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%205/2022/09/24/OK.html",
            "relUrl": "/week%205/2022/09/24/OK.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Python Lists and Dictionaries HACKS",
            "content": "",
            "url": "https://stg-7.github.io/FastPagesSTG/week%205/2022/09/24/JSJN.html",
            "relUrl": "/week%205/2022/09/24/JSJN.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Create Task Introduction",
            "content": "Idea . Create a quiz that tests athletes on there athletic and mental strengths and weaknesses, and through their responses record and calulate a postion that is best for them in a specific sport. . College Board Rubric . Purpose: . Quiz athletes on their physical and mental abilities, then from the data output a postion that matches them the best in their sport. . Functionality: . This program will first indicate user to select a sport that they play or are interested in. Afterwards buttons will take the user to a series of multiple different questions. On the bottom of these screens there will be a button that can take you to next question. After the final question is answered there will be a button that will take you to the final page. The final page outputs which position is best for the sport that you selected in the first page. . Data Abstraction: . Each of the questions are stored in a list. Backend processes recording and calculating responses are stored in variables that are increased or decreased in abstracted code. . Managing Complexity: . In order to manage the complexity of this quiz, I will type many comments and ordered my code in a readable fashion in order to ensure that the code is very easy to follow. The comments allow us to communicate what we are doing with each function and what the purpose of the variables are. Code should also be efficent and redundant, this can be done through data and procedural abstraction. . Procedural Abstraction: . The first function will allow the user to select the sport that they will quiz themselves on and start the quiz. After that there is a series of functions that display a question and answer buttons that have different backend processes for every different answer button. There will be a button on the bottom of each of these answer functions that allow the user to move on to the next page. The final page will display the position that is best for the player. . Algorithm Implementation: . Iteration and use of conditional statements will be used to record and calculate user input and output data that is useful for the user. I will user similar algorithms for questions pages but each screen change for question and the final page had different algoritmn implementation. . Testing: . Test the quiz during the process of coding to make sure the code runs neatly. Test the quiz after the code is fully programmed and make sure all the processes are running correctly and efficently. .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%203/2022/09/12/CBPTask.html",
            "relUrl": "/week%203/2022/09/12/CBPTask.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "AppLab HACKS",
            "content": "AppLab Planning/Blogging . Planning: . 3 Question quiz on Python syntax | Final score and percentage is outputted at the end | Design should look neat and well connected | . Blogging: At first I used the code tab to implement buttons and position of the bottom and then use on-event code for each of those buttons. After the first set of questions I realized that this is not efficient and started using the design tab to place buttons and other features on the screens. From there I used the code tab and coded in javascript to use these buttons and labels. . AppLab Creation . Quiz-AppLab . Extra features in the program: . Explanations for right and wrong answers for every question in the quiz | Final Percentage and accuracy of each question is posted at the end | Use of “if” conditional statements and JavaScript code to further enhance the App | . Relating AppLab to College Board Performance Task . Purpose: . The purpose of this program is to test the user’s understanding in Python syntax. . Functionality: . This program consists of 15 different screens and tests users on 3 different questions relating to Python. It starts with a home screen that allows users to click a button that takes them to the first question and different answer options. Each of those options when clicked on will take the user to a seperate screen that tells whether the answer is correct/incorrect and gives an explanation. On the bottom of these screens are a button that can take you to next question. After the final question is answered there will also be a button on the bottom of the “explanation” screens that will take you to the final page. This page outputs which questions you got correct and the final percenage. . Data Abstraction: . Each of the answer buttons in the questions page had their own functionality abstracted in one method. The explanations for right/wrong, the button to move on to the next page, and the backend process of calculating correct/incorrect was all done in one method for each question. To further improve this code I can further abstract the data by adding a list of dictionaries that contain key-value pairs for questions and answers. . Managing Complexity: . In order to manage the complexity of this quiz, I was able to type many comments and ordered my code in a readable fashion in order to ensure that the code is very easy to follow. The comments allow us to communicate what we are doing with each function and what the purpose of the variables are. And the repeated use of the functions allow us to easily call back to a known function that we make and it communicated the purpose of the funciton without having the reader have to understand the code. . Procedural Abstraction: . The first function allows the user to start the quiz, after that there is a series of functions that display a question and answer buttons that have different outcomes for every different answer button. At every new page that was called from the answer button there is a function that allows the user to go to the next question and then finally the last qusetion. All along backend processes and calculations occur calculating which question the user got correct and the final percentage that is displayed in the last page/ . Algorithm Implementation: . I used similar algorithms for every answer button in the questions pages but each screen change for question and the final page had different algoritmn implementation. To further improve this code, we can reduce repition for the answer buttons algorithms. . Testing: . I tested this quiz multiple times, both in the process of creating the quiz and even after I fully programmed it. I tested every screen’s output and tested the validity of the final percentage in the last screen. .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%203/2022/09/11/AppLabBlog.html",
            "relUrl": "/week%203/2022/09/11/AppLabBlog.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Python Lists and Dictionaries HACKS",
            "content": "Defining a List of Dictionaries called &quot;InfoDB&quot; . InfoDB = [] # defining people as dictionaries that contain key-value pairs Shaurya = { # these records are of string type &quot;FirstName&quot;: &quot;Shaurya&quot;, &quot;LastName&quot;: &quot;Goel&quot;, &quot;DOB&quot;: &quot;October 29, 2007&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;shauryaggamer@gmail.com&quot;, # these records are of list type &quot;Owns Cars&quot;: [&quot;None&quot;], &quot;Owns Devices&quot;: [&quot;iPhone&quot;, &quot;Gaming laptop&quot;], &quot;Hobbies&quot;: [&quot;Football&quot;, &quot;Soccer&quot;, &quot;Video Games&quot;] } Tom = { &quot;FirstName&quot;: &quot;Tom&quot;, &quot;LastName&quot;: &quot;Brady&quot;, &quot;DOB&quot;: &quot;August 3, 1977&quot;, &quot;Residence&quot;: &quot;Tampa Bay&quot;, &quot;Email&quot;: &quot;info@brandbrady.com &quot;, &quot;Owns Cars&quot;: [&quot;2017 Aston Martin DB11&quot;, &quot;2015 Rolls Royce Ghost&quot;, &quot;2018 Limited Edition TB12 Aston Martin Vanquish S Volante&quot;, &quot;2015 Ferrari M458-T&quot;, &quot;2009 Audi R8&quot;], &quot;Hobbies&quot;: [&quot;Football&quot;, &quot;Cars&quot;] } Cristiano = { &quot;FirstName&quot;: &quot;Cristiano&quot;, &quot;LastName&quot;: &quot;Ronaldo&quot;, &quot;DOB&quot;: &quot;February 5, 1985&quot;, &quot;Residence&quot;: &quot;Portugal&quot;, &quot;Email&quot;: &quot;NA&quot;, &quot;Owns Cars&quot;: [&quot;Rolls-Royce Cullinan&quot;, &quot;Ferrari F12 TDF&quot;, &quot;Lamborghini Aventador&quot;, &quot;Bugatti Centodieci&quot;, &quot;Maserati GranCabrio&quot;, &quot;Porsche 911 turbo&quot;, &quot;Ferrari F430&quot; ] , &quot;Hobbies&quot;: [&quot;Soccer&quot;, &quot;Cars&quot;] } # adding the dictionaries to the overall list, creating the whole database InfoDB.append(Shaurya) InfoDB.append(Tom) InfoDB.append(Cristiano) . def getValue(dic, key): if (key in dic): return str(dic[key]) def showValue(dic, key): if (key in dic): print(key + &quot; : &quot; + getValue(dic, key)) . Iteration through InfDB Using specic keys . for x in InfoDB: print() showValue(x,&quot;FirstName&quot;) showValue(x,&quot;LastName&quot;) showValue(x,&quot;DOB&quot;) showValue(x,&quot;Email&quot;) showValue(x,&quot;Owns Cars&quot;) showValue(x,&quot;Owns Devices&quot;) showValue(x,&quot;Hobbies&quot;) . FirstName : Shaurya LastName : Goel DOB : October 29, 2007 Email : shauryaggamer@gmail.com Owns Cars : [&#39;None&#39;] Owns Devices : [&#39;iPhone&#39;, &#39;Gaming laptop&#39;] Hobbies : [&#39;Football&#39;, &#39;Soccer&#39;, &#39;Video Games&#39;] FirstName : Tom LastName : Brady DOB : August 3, 1977 Email : info@brandbrady.com Owns Cars : [&#39;2017 Aston Martin DB11&#39;, &#39;2015 Rolls Royce Ghost&#39;, &#39;2018 Limited Edition TB12 Aston Martin Vanquish S Volante&#39;, &#39;2015 Ferrari M458-T&#39;, &#39;2009 Audi R8&#39;] Hobbies : [&#39;Football&#39;, &#39;Cars&#39;] FirstName : Cristiano LastName : Ronaldo DOB : February 5, 1985 Email : NA Owns Cars : [&#39;Rolls-Royce Cullinan&#39;, &#39;Ferrari F12 TDF&#39;, &#39;Lamborghini Aventador&#39;, &#39;Bugatti Centodieci&#39;, &#39;Maserati GranCabrio&#39;, &#39;Porsche 911 turbo&#39;, &#39;Ferrari F430&#39;] Hobbies : [&#39;Soccer&#39;, &#39;Cars&#39;] . Iteration through InfoDB using &quot;For Loop&quot; . for x in InfoDB: print() # iteratating through every key in the dictionary for key in x: print(str(key) + &quot; : &quot; + str(x[key])) . FirstName : Shaurya LastName : Goel DOB : October 29, 2007 Residence : San Diego Email : shauryaggamer@gmail.com Owns Cars : [&#39;None&#39;] Owns Devices : [&#39;iPhone&#39;, &#39;Gaming laptop&#39;] Hobbies : [&#39;Football&#39;, &#39;Soccer&#39;, &#39;Video Games&#39;] FirstName : Tom LastName : Brady DOB : August 3, 1977 Residence : Tampa Bay Email : info@brandbrady.com Owns Cars : [&#39;2017 Aston Martin DB11&#39;, &#39;2015 Rolls Royce Ghost&#39;, &#39;2018 Limited Edition TB12 Aston Martin Vanquish S Volante&#39;, &#39;2015 Ferrari M458-T&#39;, &#39;2009 Audi R8&#39;] Hobbies : [&#39;Football&#39;, &#39;Cars&#39;] FirstName : Cristiano LastName : Ronaldo DOB : February 5, 1985 Residence : Portugal Email : NA Owns Cars : [&#39;Rolls-Royce Cullinan&#39;, &#39;Ferrari F12 TDF&#39;, &#39;Lamborghini Aventador&#39;, &#39;Bugatti Centodieci&#39;, &#39;Maserati GranCabrio&#39;, &#39;Porsche 911 turbo&#39;, &#39;Ferrari F430&#39;] Hobbies : [&#39;Soccer&#39;, &#39;Cars&#39;] . Iteration through InfoDB using &quot;For Loop&quot; (with Indexes) . # len(InfoDB) returns length of InfoDB as an integer # range command returns a sequence of numbers, starting from 0 by default and ends (in this case) with the length of InfoDB for x in range(len(InfoDB)): print() # getting the dictionary stored at index position x, assigned to variable &quot;item&quot; item = InfoDB[x] # printing out every key and value in the dictionary using y as the index for y in range(len(item)): print(list(item)[y] +&quot; : &quot; + str(list(item.values())[y])) . FirstName : Shaurya LastName : Goel DOB : October 29, 2007 Residence : San Diego Email : shauryaggamer@gmail.com Owns Cars : [&#39;None&#39;] Owns Devices : [&#39;iPhone&#39;, &#39;Gaming laptop&#39;] Hobbies : [&#39;Football&#39;, &#39;Soccer&#39;, &#39;Video Games&#39;] FirstName : Tom LastName : Brady DOB : August 3, 1977 Residence : Tampa Bay Email : info@brandbrady.com Owns Cars : [&#39;2017 Aston Martin DB11&#39;, &#39;2015 Rolls Royce Ghost&#39;, &#39;2018 Limited Edition TB12 Aston Martin Vanquish S Volante&#39;, &#39;2015 Ferrari M458-T&#39;, &#39;2009 Audi R8&#39;] Hobbies : [&#39;Football&#39;, &#39;Cars&#39;] FirstName : Cristiano LastName : Ronaldo DOB : February 5, 1985 Residence : Portugal Email : NA Owns Cars : [&#39;Rolls-Royce Cullinan&#39;, &#39;Ferrari F12 TDF&#39;, &#39;Lamborghini Aventador&#39;, &#39;Bugatti Centodieci&#39;, &#39;Maserati GranCabrio&#39;, &#39;Porsche 911 turbo&#39;, &#39;Ferrari F430&#39;] Hobbies : [&#39;Soccer&#39;, &#39;Cars&#39;] . Iterating through InfoDB using &quot;While Loop&quot; . listnumber = 0 # setting condition that while listnumber is less than the length of InfoDB run this code: while listnumber &lt; len(InfoDB) : # assigning dictionary to the variable DB DB = InfoDB[listnumber] print() # printing out all content in InfoDB for key in DB: print(str(key) + &quot; : &quot; + str(DB[key])) # adding and reassigning listnumber plus 1 so that code can iterate through the whole list listnumber += 1 . FirstName : Shaurya LastName : Goel DOB : October 29, 2007 Residence : San Diego Email : shauryaggamer@gmail.com Owns Cars : [&#39;None&#39;] Owns Devices : [&#39;iPhone&#39;, &#39;Gaming laptop&#39;] Hobbies : [&#39;Football&#39;, &#39;Soccer&#39;, &#39;Video Games&#39;] FirstName : Tom LastName : Brady DOB : August 3, 1977 Residence : Tampa Bay Email : info@brandbrady.com Owns Cars : [&#39;2017 Aston Martin DB11&#39;, &#39;2015 Rolls Royce Ghost&#39;, &#39;2018 Limited Edition TB12 Aston Martin Vanquish S Volante&#39;, &#39;2015 Ferrari M458-T&#39;, &#39;2009 Audi R8&#39;] Hobbies : [&#39;Football&#39;, &#39;Cars&#39;] FirstName : Cristiano LastName : Ronaldo DOB : February 5, 1985 Residence : Portugal Email : NA Owns Cars : [&#39;Rolls-Royce Cullinan&#39;, &#39;Ferrari F12 TDF&#39;, &#39;Lamborghini Aventador&#39;, &#39;Bugatti Centodieci&#39;, &#39;Maserati GranCabrio&#39;, &#39;Porsche 911 turbo&#39;, &#39;Ferrari F430&#39;] Hobbies : [&#39;Soccer&#39;, &#39;Cars&#39;] . Iteration through InfoDB Using &quot;Recursion&quot; . def recursive_loop(n): # setting an if statement that &quot;if n is less than the length of InfoDB, follow this code:&quot; if n &lt; len(InfoDB): # assigning dictionary to the variable DB DB = InfoDB[n] # printing out all the keys and values in the DB dictionary print() for key in DB: print(str(key) + &quot; : &quot; + str(DB[key])) # recursion occurs here, the function is called again but n is added and reassigned to a value one greater recursive_loop(n + 1) recursive_loop(0) . FirstName : Shaurya LastName : Goel DOB : October 29, 2007 Residence : San Diego Email : shauryaggamer@gmail.com Owns Cars : [&#39;None&#39;] Owns Devices : [&#39;iPhone&#39;, &#39;Gaming laptop&#39;] Hobbies : [&#39;Football&#39;, &#39;Soccer&#39;, &#39;Video Games&#39;] FirstName : Tom LastName : Brady DOB : August 3, 1977 Residence : Tampa Bay Email : info@brandbrady.com Owns Cars : [&#39;2017 Aston Martin DB11&#39;, &#39;2015 Rolls Royce Ghost&#39;, &#39;2018 Limited Edition TB12 Aston Martin Vanquish S Volante&#39;, &#39;2015 Ferrari M458-T&#39;, &#39;2009 Audi R8&#39;] Hobbies : [&#39;Football&#39;, &#39;Cars&#39;] FirstName : Cristiano LastName : Ronaldo DOB : February 5, 1985 Residence : Portugal Email : NA Owns Cars : [&#39;Rolls-Royce Cullinan&#39;, &#39;Ferrari F12 TDF&#39;, &#39;Lamborghini Aventador&#39;, &#39;Bugatti Centodieci&#39;, &#39;Maserati GranCabrio&#39;, &#39;Porsche 911 turbo&#39;, &#39;Ferrari F430&#39;] Hobbies : [&#39;Soccer&#39;, &#39;Cars&#39;] . Outputing data in InfoDB in Reverse Order . listnumber = 0 # setting condition that while listnumber is less than the length of InfoDB run this code: while listnumber &lt; len(InfoDB) : # Assigning a dictionary to the variable DB DB = InfoDB[listnumber] print() for key in reversed(list(DB.keys())): print(str(key) + &quot; : &quot; + str(DB[key])) # adding and reassigning keynumber and valuenumber so that the code will go on until all of the content in InfoDB is printed out listnumber += 1 . Hobbies : [&#39;Football&#39;, &#39;Soccer&#39;, &#39;Video Games&#39;] Owns Devices : [&#39;iPhone&#39;, &#39;Gaming laptop&#39;] Owns Cars : [&#39;None&#39;] Email : shauryaggamer@gmail.com Residence : San Diego DOB : October 29, 2007 LastName : Goel FirstName : Shaurya Hobbies : [&#39;Football&#39;, &#39;Cars&#39;] Owns Cars : [&#39;2017 Aston Martin DB11&#39;, &#39;2015 Rolls Royce Ghost&#39;, &#39;2018 Limited Edition TB12 Aston Martin Vanquish S Volante&#39;, &#39;2015 Ferrari M458-T&#39;, &#39;2009 Audi R8&#39;] Email : info@brandbrady.com Residence : Tampa Bay DOB : August 3, 1977 LastName : Brady FirstName : Tom Hobbies : [&#39;Soccer&#39;, &#39;Cars&#39;] Owns Cars : [&#39;Rolls-Royce Cullinan&#39;, &#39;Ferrari F12 TDF&#39;, &#39;Lamborghini Aventador&#39;, &#39;Bugatti Centodieci&#39;, &#39;Maserati GranCabrio&#39;, &#39;Porsche 911 turbo&#39;, &#39;Ferrari F430&#39;] Email : NA Residence : Portugal DOB : February 5, 1985 LastName : Ronaldo FirstName : Cristiano . Adding to InfoDB using User Input . def AddToDB(x, key): print (&quot;Input the &quot; + key + &quot; for the Person&quot;) value = input() x[key] = value def AddToDBList(x, key): valueList = [] while True : print (&quot;Input the &quot; + key + &quot; for the Person&quot;) value = input() valueList.append(value) print(&quot;Do you want to add more values for &quot; + key + &quot;. Enter &#39;Y&#39; for yes and &#39;N&#39; for no.&quot;) check = input() if check == &quot;N&quot;: break x[key] = valueList # create a new empty dictionary newdict = {} print(&quot;Add a person&#39;s first name to the DataBase&quot;) # add first name to dictionary AddToDB(newdict, &quot;FirstName&quot;) # add last name to dictionary AddToDB(newdict, &quot;LastName&quot;) # add DOB to dictionary AddToDB(newdict, &quot;DOB&quot;) # add Email to dictionary AddToDB(newdict, &quot;Email&quot;) # add Owns Cars list to dictionary AddToDBList(newdict, &quot;Owns Cars&quot;) # add Owns Devices list to dictionary AddToDBList(newdict, &quot;Owns Devices&quot;) # add Hobbies list to dictionary AddToDBList(newdict, &quot;Hobbies&quot;) InfoDB.append(newdict) print(&quot;You added &quot; + newdict[&quot;FirstName&quot;] + &quot; to the database&quot;) for x in InfoDB: print(&quot;======================&quot;) showValue(x,&quot;FirstName&quot;) showValue(x,&quot;LastName&quot;) showValue(x,&quot;DOB&quot;) showValue(x,&quot;Email&quot;) showValue(x,&quot;Owns Cars&quot;) showValue(x,&quot;Owns Devices&quot;) showValue(x,&quot;Hobbies&quot;) . Add a person&#39;s first name to the DataBase Input the FirstName for the Person Input the LastName for the Person Input the DOB for the Person Input the Email for the Person Input the Owns Cars for the Person Do you want to add more values for Owns Cars. Enter &#39;Y&#39; for yes and &#39;N&#39; for no. Input the Owns Cars for the Person Do you want to add more values for Owns Cars. Enter &#39;Y&#39; for yes and &#39;N&#39; for no. Input the Owns Cars for the Person Do you want to add more values for Owns Cars. Enter &#39;Y&#39; for yes and &#39;N&#39; for no. Input the Owns Cars for the Person Do you want to add more values for Owns Cars. Enter &#39;Y&#39; for yes and &#39;N&#39; for no. Input the Owns Devices for the Person Do you want to add more values for Owns Devices. Enter &#39;Y&#39; for yes and &#39;N&#39; for no. Input the Owns Devices for the Person Do you want to add more values for Owns Devices. Enter &#39;Y&#39; for yes and &#39;N&#39; for no. Input the Owns Devices for the Person Do you want to add more values for Owns Devices. Enter &#39;Y&#39; for yes and &#39;N&#39; for no. Input the Hobbies for the Person Do you want to add more values for Hobbies. Enter &#39;Y&#39; for yes and &#39;N&#39; for no. Input the Hobbies for the Person Do you want to add more values for Hobbies. Enter &#39;Y&#39; for yes and &#39;N&#39; for no. You added Lebron to the database ====================== FirstName : Shaurya LastName : Goel DOB : October 29, 2007 Email : shauryaggamer@gmail.com Owns Cars : [&#39;None&#39;] Owns Devices : [&#39;iPhone&#39;, &#39;Gaming laptop&#39;] Hobbies : [&#39;Football&#39;, &#39;Soccer&#39;, &#39;Video Games&#39;] ====================== FirstName : Tom LastName : Brady DOB : August 3, 1977 Email : info@brandbrady.com Owns Cars : [&#39;2017 Aston Martin DB11&#39;, &#39;2015 Rolls Royce Ghost&#39;, &#39;2018 Limited Edition TB12 Aston Martin Vanquish S Volante&#39;, &#39;2015 Ferrari M458-T&#39;, &#39;2009 Audi R8&#39;] Hobbies : [&#39;Football&#39;, &#39;Cars&#39;] ====================== FirstName : Cristiano LastName : Ronaldo DOB : February 5, 1985 Email : NA Owns Cars : [&#39;Rolls-Royce Cullinan&#39;, &#39;Ferrari F12 TDF&#39;, &#39;Lamborghini Aventador&#39;, &#39;Bugatti Centodieci&#39;, &#39;Maserati GranCabrio&#39;, &#39;Porsche 911 turbo&#39;, &#39;Ferrari F430&#39;] Hobbies : [&#39;Soccer&#39;, &#39;Cars&#39;] ====================== FirstName : Lebron LastName : James DOB : December 30, 1984 Email : NA Owns Cars : [&#39;Ferrari F430 Spyder&#39;, &#39;Porsche 918 Spyder&#39;, &#39;Lamborghini Aventador Roadster&#39;, &#39;Bentley Continental GT&#39;] Owns Devices : [&#39;Iphone&#39;, &#39;Airpods&#39;, &#39;Tablet&#39;] Hobbies : [&#39;Basketball&#39;, &#39;Cars&#39;] . Removing from InfoDB using User Input . removename = &quot;&quot; def RemovToDB(): print(&quot;Remove a person from the database:&quot;) removename = input() for x in InfoDB: if &quot;FirstName&quot; in x: if getValue(x, &quot;FirstName&quot;) == str(removename): InfoDB.remove(x) print(&quot;You removed &quot; + removename + &quot; from the databse&quot;) RemovToDB() print(&quot;Here is the updated InfoDB:&quot;) for x in InfoDB: print() showValue(x,&quot;FirstName&quot;) showValue(x,&quot;LastName&quot;) showValue(x,&quot;DOB&quot;) showValue(x,&quot;Email&quot;) showValue(x,&quot;Owns Cars&quot;) showValue(x,&quot;Owns Devices&quot;) showValue(x,&quot;Hobbies&quot;) . Remove a person from the database: You removed Lebron from the databse Here is the updated InfoDB: FirstName : Shaurya LastName : Goel DOB : October 29, 2007 Email : shauryaggamer@gmail.com Owns Cars : [&#39;None&#39;] Owns Devices : [&#39;iPhone&#39;, &#39;Gaming laptop&#39;] Hobbies : [&#39;Football&#39;, &#39;Soccer&#39;, &#39;Video Games&#39;] FirstName : Tom LastName : Brady DOB : August 3, 1977 Email : info@brandbrady.com Owns Cars : [&#39;2017 Aston Martin DB11&#39;, &#39;2015 Rolls Royce Ghost&#39;, &#39;2018 Limited Edition TB12 Aston Martin Vanquish S Volante&#39;, &#39;2015 Ferrari M458-T&#39;, &#39;2009 Audi R8&#39;] Hobbies : [&#39;Football&#39;, &#39;Cars&#39;] FirstName : Cristiano LastName : Ronaldo DOB : February 5, 1985 Email : NA Owns Cars : [&#39;Rolls-Royce Cullinan&#39;, &#39;Ferrari F12 TDF&#39;, &#39;Lamborghini Aventador&#39;, &#39;Bugatti Centodieci&#39;, &#39;Maserati GranCabrio&#39;, &#39;Porsche 911 turbo&#39;, &#39;Ferrari F430&#39;] Hobbies : [&#39;Soccer&#39;, &#39;Cars&#39;] .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%202/2022/09/01/PythonHACKS.html",
            "relUrl": "/week%202/2022/09/01/PythonHACKS.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "HTML Hacks",
            "content": "Hacks for HTML . Changing remote theme temporarily . Changed value for key remote_theme: . . Change to fastpages site: . . Main problems when switching the theme: . Files under the the _pages no longer appear, this includes: search | tags | . | .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%202/2022/08/31/HTMLHacks.html",
            "relUrl": "/week%202/2022/08/31/HTMLHacks.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Alumini Panel Extra Credit Assignment",
            "content": "Important Insights and Takeaways from the event . Background Info on Alumini . Some of the aulumini graduated to UCs | Most of them are majoring or have some sort of knowledge and background in Computer Science | . Biggest Challenges in Computer Science . Staying motivated You may get demotivated because of problems and setbacks during the learning process | You also may get demotivated because of people being ahead of you | . | Getting started, coding is very difficult | . . General Tips in Computer Science . Focus on your own path | Ignore clashing egos with colleagues and peers | Have a better mindset to learn instead of just trying to get stuff down (Taking shortcuts does not help!) | Logic/Algorithmic problemsolving is more important than knowledge of syntax | Logical thinking background helped Alumini with Coding and solving problems | . Group Based Work in College . There are a lot of group based assignments in college | Managing your group is very important to your success | Some of the alumini got used for doing too much group work, be mindful on how you split your work amongst colleagues and peers | . Are there any PBL scenarios in college computer science classes? . In college there are 2 of them, 1 in senior year | In college there are some project based learning classes and some theory based classes | There are a lot of PBL exams which are fixed for computer science courses | . Applying for Computer Science even if you are not majoring in it . Computer science can be used for optimization in other fields Mechanical Engineering | Cognitive Science | Aerospace | 3D Printing | Statistics (Code in R) | . | Computer science can also help with high level math | Programming is in almost every field. | . Internships . Getting internships and talking to professors will help get better jobs | . Tips for getting internships: . Have an outstanding resume that seperates you from everyone else Linkedin, Portfolio websites | . | Know when to apply Dates to apply, deadlines, etc. | . | Networking other people/engineers that are currently in the job | . | . Alumini personal experience in Internships: . Alumuni did Internships in Northrop Grumman | Alumini did internships in a company doing APIs and web development | . . Additonal Information on Internships and Future Jobs . Doing 2 or 3 personal projects will help out with applying for internships and jobs | Alumini did a lot of work in data application | Alumini joined a club called Trident A in UCSD | .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%201/2022/08/29/AluminiPanelNotes.html",
            "relUrl": "/week%201/2022/08/29/AluminiPanelNotes.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Shaurya Goel's BASH Tutorial Hacks",
            "content": "My Hacks . Workspace Setup: Automate cloning git repositories into my working directory | Automate fetching latest changes from github to my working directory | . | Automate checking tools are installed :sunglasses: Java | Python | Bash | . | Autoname verification using Anaconda - work in progress... :sunglasses: | . Workspace setup . Automate cloning the local workspace with projects from github | Automate updating the local workspace with projects from github Running this will ensure I have latest changes | . echo &quot;Setting up local folders and checking out repository&quot; git config --global user.email shauryaggamer@gmail.com git config --global user.name STG-7 # Variable section export home_dir=/home/shaurya # this is only needed since there is an issue with my home dir right now export workspace_dir=/home/shaurya/vscode # setting project directory to /home/shaurya export apcsp=$workspace_dir/APCSP # Clone APCSP project export apcsp_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # APCSP URL export myproj=$workspace_dir/FastPagesSTG # Clone my project export myproj_repo=&quot;https://github.com/STG-7/FastPagesSTG.git&quot; # My project URL cd $home_dir # start in home directory # Conditional block to make a project directory if [ ! -d $workspace_dir ] then echo &quot;Directory $workspace_dir does not exists... Setting up empty workspace directory $workspace_dir&quot; mkdir -p $workspace_dir fi echo &quot;Directory $workspace_dir exists.&quot; # Conditional block to git clone a apcsp from apcsp_repo if [ ! -d $apcsp ] then echo &quot;Project $apcsp does not exists... cloning $apcsp_repo&quot; cd $workspace_dir git clone $apcsp_repo echo &quot;Project $apcsp cloned successfully.&quot; cd $home_dir else cd $apcsp git fetch origin echo &quot;Project $apcsp updated successfully.&quot; cd $workspace_dir fi # Conditional block to git clone a myproj from myproj_repo if [ ! -d $myproj ] then echo &quot;Project $myproj does not exists... cloning $myproj_repo&quot; cd $workspace_dir git clone $myproj_repo echo &quot;Project $myproj cloned successfully.&quot; cd $home_dir else cd $myproj git fetch origin echo &quot;Project $myproj updated successfully.&quot; cd $workspace_dir fi . Setting up local folders and checking out repository Directory /home/shaurya/vscode exists. Project /home/shaurya/vscode/APCSP updated successfully. Project /home/shaurya/vscode/FastPagesSTG updated successfully. . Environment Validation . Automate checking if I have following kernels Javascript | Python3 | Bash | . | . js=0 p3=0 ba=0 jupyter kernelspec list | awk &#39;{print $1}&#39; | while read line; do if [ &quot;$line&quot; = &quot;javascript&quot; ] then js=1 elif [ &quot;$line&quot; = &quot;python3&quot; ] then p3=1 elif [ &quot;$line&quot; = &quot;bash&quot; ] then ba=1 fi done if [ js == 0 ] then echo &quot;Javascript Kernel Not Found&quot; else echo &quot;Javascript Kernel Exists&quot; fi if [ p3 == 0 ] then echo &quot;Python Kernel Not Found&quot; else echo &quot;Python Kernel Exists&quot; fi if [ ba == 0 ] then echo &quot;Bash Kernel Not Found&quot; else echo &quot;Bash Kernel Exists&quot; fi . Javascript Kernel Exists Python Kernel Exists Bash Kernel Exists . Verifying tools using conda . Automate checking if I have following kernels Javascript | Python3 | Bash | Ipykernel | . | . package_list=/tmp/packagelist.txt if [[ ! -f $package_list ]] then conda list -n base &gt; $package_list fi python_ver=`awk &#39;$1 == &quot;python&quot; { print $2 }&#39; /tmp/packagelist.txt` if [ $python_ver == &quot;&quot; ] then echo &quot;Python not installed&quot; else echo &quot;Python installed with version $python_ver&quot; fi ipykernel_ver=`awk &#39;$1 == &quot;ipykernel&quot; { print $2 }&#39; /tmp/packagelist.txt` if [ $ipykernel_ver == &quot;&quot; ] then echo &quot;ipykernel not installed&quot; else echo &quot;ipykernel installed with version $ipykernel_ver&quot; fi conda_ver=`awk &#39;$1 == &quot;conda&quot; { print $2 }&#39; /tmp/packagelist.txt` if [ $conda_ver == &quot;&quot; ] then echo &quot;conda not installed&quot; else echo &quot;conda installed with version $conda_ver&quot; fi bash_kernel_ver=`awk &#39;$1 == &quot;bash-kernel&quot; { print $2 }&#39; /tmp/packagelist.txt` if [ $bash_kernel_ver == &quot;&quot; ] then echo &quot;bash-kernel not installed&quot; else echo &quot;bash-kernel installed with version $bash_kernel_ver&quot; fi jupyter_ver=`awk &#39;$1 == &quot;jupyter&quot; { print $2 }&#39; /tmp/packagelist.txt` if [ $jupyter_ver == &quot;&quot; ] then echo &quot;jupyter not installed&quot; else echo &quot;jupyter installed with version $jupyter_ver&quot; fi . Python installed with version 3.9.12 ipykernel installed with version 6.9.1 conda installed with version 4.13.0 bash-kernel installed with version 0.7.2 jupyter installed with version 1.0.0 .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%201/2022/08/24/Shaurya-bash_tutorial.html",
            "relUrl": "/week%201/2022/08/24/Shaurya-bash_tutorial.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Quiz made through Python Code",
            "content": "Anatomy of my Code: . I definded a dictionary and created key (question) and value (answer) pairs to avoid redundance in code. | I then defined a for loop and an if statement to iterate through the keys (questions) and determine if they had the correct value (answer). | Afterwards, I used mathematical operations and a formatter to display the percentage of the grade. | . import getpass, sys #defining a function that takes in a parameter and returns user input def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg # create a dictionary (key value pairs) of questions and answers, this way I can add as many questions as I want without duplicating the code quesstionsAndAsnwers = { &quot;What command is used to include other functions that were previously developed?&quot;: &quot;import&quot;, &quot;What command is used to evaluate correct or incorrect response in this example?&quot;: &quot;if&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;: &quot;expression&quot;, &quot;What command is used to define a function?&quot;: &quot;def&quot;, &quot;What symbol is used for String Concatenation?&quot;: &quot;+&quot; } # since the number of questions can change, the questions variable is populated with the length of the dictionary questions = len(quesstionsAndAsnwers) correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions on the key vocabulary of Python basics.&quot;) # iterate over the keys from the dictionary for key in quesstionsAndAsnwers: #pass the question (key) to the function rsp = question_with_response(key) #compare the user response with value from the dictionary (the answer) if rsp == quesstionsAndAsnwers[key]: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) + &quot;/&quot; + str(questions)) #print the percentage print(&quot;Total Percentage: &quot; + str (format(correct/questions * 100,&quot;.2f&quot;)) + &quot;%&quot;) . Hello, shaur running C: Users shaur AppData Local Microsoft WindowsApps PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0 python.exe You will be asked 5 questions on the key vocabulary of Python basics. Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Question: What command is used to define a function? def is correct! Question: What symbol is used for String Concatenation? + is correct! shaur you scored 5/5 Total Percentage: 100.00% .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%201/2022/08/24/AQuiz.html",
            "relUrl": "/week%201/2022/08/24/AQuiz.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "First Markdown Post",
            "content": "Goals for This Year: . Gain a better understanding of Python and programming languages | Learn how to work with other people and collaborate in projects | Learn how to work with an IDE (VSCode) and repositories (Github) | . Favorite Things: . Color: Black | Food: Sushi | Computing Device: Playstation | . .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%200/2022/08/20/FirstMD.html",
            "relUrl": "/week%200/2022/08/20/FirstMD.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "First Jupyter Notebook and Python Code",
            "content": "Printing &quot;Hello World!&quot; Using Python . print(&quot;Hello World!&quot;) . Hello World! .",
            "url": "https://stg-7.github.io/FastPagesSTG/week%200/2022/08/20/FirstJN.html",
            "relUrl": "/week%200/2022/08/20/FirstJN.html",
            "date": " • Aug 20, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Submenu",
          "content": "&lt;!DOCTYPE html&gt; . . Dropdown Link 1 Link 2 .",
          "url": "https://stg-7.github.io/FastPagesSTG/submenu/",
          "relUrl": "/submenu/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "Hello, my name is Shaurya Goel and I am an APCSP Student in Mr. Mortensen’s Period 4 class. .",
          "url": "https://stg-7.github.io/FastPagesSTG/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stg-7.github.io/FastPagesSTG/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}